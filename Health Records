// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == msg.sender);
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(owner() == msg.sender);
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


contract HealthRecord is Ownable {
    uint256 public recordId;
    uint public totalCount = 0;
    Record[] public records;

    constructor(uint256 _id) Ownable(msg.sender) {
        recordId = _id;
    }

    struct Record {
        uint recordId;
        string name;
        uint age;
        string condition;
    }
    
    function addRecord(string memory _name, uint _age, string memory _condition) external returns(uint){
        recordId++;
        totalCount++;
        records.push(Record(recordId, _name, _age, _condition));
        return recordId;
    }

    function getAllRecordByUser(uint _id) public view returns (Record[] memory){
        uint count = 0;
        for(uint i=0; i<records.length; i++) {
            if(records[i].recordId == _id)
                count++;
        }

        Record[] memory userRecord = new Record[](count);
        for(uint i=0; i<records.length; i++) {
            if(records[i].recordId == _id) {
                userRecord[i] = (records[i]);
            }
        }
        return userRecord;
    }

    function getAllRecords() public view returns (Record[] memory) {
        return records;
    }

    function getTotalRecords() public view returns (uint) {
        return totalCount;
    }


}
